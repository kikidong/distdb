本项目完全抛弃C++,改而使用非常传统的C语言进行开发
喜欢C++的同事表喷我哦

distdb 数据库导出RPC :

int distdb_rpc_server_info(int whatinfo,...);
int distdb_rpc_get_connected_peers(struct distdb_nodes*,int * );
int distdb_rpc_force_connect_peer(struct distdb_nodes* peer);
int distdb_rpc_force_disconnect_peer(struct distdb_nodes* peer);
int distdb_rpc_force_restart();

int distdb_rpc_execute_sql_bin(struct DISTDB_SQL_RESULT ** out,const char *,size_t length,int executeflag);

//可以不用等全部的结果出来。 :)
int distdb_rpc_wait_result(struct DISTDB_SQL_RESULT *,int waitflag);
int distdb_rpc_fetch_result(struct DISTDB_SQL_RESULT *,char ** result[]);
int distdb_rpc_seek_result(struct DISTDB_SQL_RESULT *, int skip );
int distdb_rpc_free_result(struct DISTDB_SQL_RESULT *);
int distdb_rpc_result_info(struct DISTDB_SQL_RESULT *,int whatinfo , ... );

distdb 的RPC包裹库导出如下函数 (libdistdb.so(Linux) / distdb.dll(WIN32))

//connect to distdb rpc server. PASS NULL default to localhost
int distdb_rpc_connectto(const char * rpc_server); 
int distdb_rpc_disconnect();
int distdb_rpc_server_info(int whatinfo,...);
const char * distdb_version();

int distdb_rpc_get_connected_peers(struct distdb_nodes*,int * );
int distdb_rpc_force_connect_peer(struct distdb_nodes* peer);
int distdb_rpc_force_disconnect_peer(struct distdb_nodes* peer);
int distdb_rpc_force_restart();

int distdb_rpc_execute_sql_str(struct DISTDB_SQL_RESULT ** out,const char *, int executeflag);
int distdb_rpc_execute_sql_bin(struct DISTDB_SQL_RESULT ** out,const char *,size_t length,int executeflag);

//可以不用等全部的结果出来。 :)
int distdb_rpc_wait_result(struct DISTDB_SQL_RESULT *,int waitflag);
int distdb_rpc_fetch_result(struct DISTDB_SQL_RESULT *,char ** result[]);
int distdb_rpc_seek_result(struct DISTDB_SQL_RESULT *, int skip );
int distdb_rpc_free_result(struct DISTDB_SQL_RESULT *);
int distdb_rpc_result_info(struct DISTDB_SQL_RESULT *,int whatinfo , ... );

====================================偶是华丽的分割线==哦耶==========================================

远程查找操作详解

在进行远程操作的时候，distdb 向连接到的每个节点发送查找请求 (暂时的，以后可能会进行优化，只向最有可
能拥有数据的节点发出查找请求,找不到了再进行广播)。

收到查询请求后， distdb 进行本地查询，将查询到的结果依次发送回去。
客户端此时可以使用  distdb_rpc_wait_result 进行等待。 等待一定的结果集的出现。

distdb 无法过滤相同记录的多次返回。因为这是不可能做到的。除非 hack 进你的数据结构，添加一些字段进行
识别。但是，这又并不通常是你所期望的。所以，最好的办法就是 ... 偶不整了嘛！




